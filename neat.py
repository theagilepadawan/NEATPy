# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _neat
else:
    import _neat

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def new_uint32_tp():
    return _neat.new_uint32_tp()

def copy_uint32_tp(value):
    return _neat.copy_uint32_tp(value)

def delete_uint32_tp(obj):
    return _neat.delete_uint32_tp(obj)

def uint32_tp_assign(obj, value):
    return _neat.uint32_tp_assign(obj, value)

def uint32_tp_value(obj):
    return _neat.uint32_tp_value(obj)

def new_size_tp():
    return _neat.new_size_tp()

def copy_size_tp(value):
    return _neat.copy_size_tp(value)

def delete_size_tp(obj):
    return _neat.delete_size_tp(obj)

def size_tp_assign(obj, value):
    return _neat.size_tp_assign(obj, value)

def size_tp_value(obj):
    return _neat.size_tp_value(obj)
class charArr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _neat.charArr_swiginit(self, _neat.new_charArr(nelements))
    __swig_destroy__ = _neat.delete_charArr

    def __getitem__(self, index):
        return _neat.charArr___getitem__(self, index)

    def __setitem__(self, index, value):
        return _neat.charArr___setitem__(self, index, value)

    def cast(self):
        return _neat.charArr_cast(self)

    @staticmethod
    def frompointer(t):
        return _neat.charArr_frompointer(t)

# Register charArr in _neat:
_neat.charArr_swigregister(charArr)

def charArr_frompointer(t):
    return _neat.charArr_frompointer(t)

NEAT_RUN_DEFAULT = _neat.NEAT_RUN_DEFAULT
NEAT_RUN_ONCE = _neat.NEAT_RUN_ONCE
NEAT_RUN_NOWAIT = _neat.NEAT_RUN_NOWAIT

def neat_init_ctx():
    return _neat.neat_init_ctx()

def neat_start_event_loop(nc, run_mode):
    return _neat.neat_start_event_loop(nc, run_mode)

def neat_get_event_loop(ctx):
    return _neat.neat_get_event_loop(ctx)

def neat_stop_event_loop(nc):
    return _neat.neat_stop_event_loop(nc)

def neat_get_backend_fd(nc):
    return _neat.neat_get_backend_fd(nc)

def neat_get_backend_timeout(nc):
    return _neat.neat_get_backend_timeout(nc)

def neat_free_ctx(nc):
    return _neat.neat_free_ctx(nc)

def neat_log_level(ctx, level):
    return _neat.neat_log_level(ctx, level)

def neat_log_file(ctx, file_name):
    return _neat.neat_log_file(ctx, file_name)
class neat_flow_operations(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    userData = property(_neat.neat_flow_operations_userData_get, _neat.neat_flow_operations_userData_set)
    status = property(_neat.neat_flow_operations_status_get, _neat.neat_flow_operations_status_set)
    stream_id = property(_neat.neat_flow_operations_stream_id_get, _neat.neat_flow_operations_stream_id_set)
    transport_protocol = property(_neat.neat_flow_operations_transport_protocol_get, _neat.neat_flow_operations_transport_protocol_set)
    on_connected = property(_neat.neat_flow_operations_on_connected_get, _neat.neat_flow_operations_on_connected_set)
    on_error = property(_neat.neat_flow_operations_on_error_get, _neat.neat_flow_operations_on_error_set)
    on_readable = property(_neat.neat_flow_operations_on_readable_get, _neat.neat_flow_operations_on_readable_set)
    on_writable = property(_neat.neat_flow_operations_on_writable_get, _neat.neat_flow_operations_on_writable_set)
    on_all_written = property(_neat.neat_flow_operations_on_all_written_get, _neat.neat_flow_operations_on_all_written_set)
    on_network_status_changed = property(_neat.neat_flow_operations_on_network_status_changed_get, _neat.neat_flow_operations_on_network_status_changed_set)
    on_aborted = property(_neat.neat_flow_operations_on_aborted_get, _neat.neat_flow_operations_on_aborted_set)
    on_timeout = property(_neat.neat_flow_operations_on_timeout_get, _neat.neat_flow_operations_on_timeout_set)
    on_close = property(_neat.neat_flow_operations_on_close_get, _neat.neat_flow_operations_on_close_set)
    on_parameters = property(_neat.neat_flow_operations_on_parameters_get, _neat.neat_flow_operations_on_parameters_set)
    on_send_failure = property(_neat.neat_flow_operations_on_send_failure_get, _neat.neat_flow_operations_on_send_failure_set)
    on_slowdown = property(_neat.neat_flow_operations_on_slowdown_get, _neat.neat_flow_operations_on_slowdown_set)
    on_rate_hint = property(_neat.neat_flow_operations_on_rate_hint_get, _neat.neat_flow_operations_on_rate_hint_set)
    label = property(_neat.neat_flow_operations_label_get, _neat.neat_flow_operations_label_set)
    ctx = property(_neat.neat_flow_operations_ctx_get, _neat.neat_flow_operations_ctx_set)
    flow = property(_neat.neat_flow_operations_flow_get, _neat.neat_flow_operations_flow_set)

    def __init__(self):
        _neat.neat_flow_operations_swiginit(self, _neat.new_neat_flow_operations())
    __swig_destroy__ = _neat.delete_neat_flow_operations

# Register neat_flow_operations in _neat:
_neat.neat_flow_operations_swigregister(neat_flow_operations)

NEAT_TYPE_INTEGER = _neat.NEAT_TYPE_INTEGER
NEAT_TYPE_FLOAT = _neat.NEAT_TYPE_FLOAT
NEAT_TYPE_STRING = _neat.NEAT_TYPE_STRING
NEAT_TAG_STREAM_ID = _neat.NEAT_TAG_STREAM_ID
NEAT_TAG_STREAM_COUNT = _neat.NEAT_TAG_STREAM_COUNT
NEAT_TAG_LOCAL_NAME = _neat.NEAT_TAG_LOCAL_NAME
NEAT_TAG_LOCAL_ADDRESS = _neat.NEAT_TAG_LOCAL_ADDRESS
NEAT_TAG_SERVICE_NAME = _neat.NEAT_TAG_SERVICE_NAME
NEAT_TAG_CONTEXT = _neat.NEAT_TAG_CONTEXT
NEAT_TAG_PARTIAL_RELIABILITY_METHOD = _neat.NEAT_TAG_PARTIAL_RELIABILITY_METHOD
NEAT_TAG_PARTIAL_RELIABILITY_VALUE = _neat.NEAT_TAG_PARTIAL_RELIABILITY_VALUE
NEAT_TAG_PARTIAL_MESSAGE_RECEIVED = _neat.NEAT_TAG_PARTIAL_MESSAGE_RECEIVED
NEAT_TAG_PARTIAL_SEQNUM = _neat.NEAT_TAG_PARTIAL_SEQNUM
NEAT_TAG_UNORDERED = _neat.NEAT_TAG_UNORDERED
NEAT_TAG_UNORDERED_SEQNUM = _neat.NEAT_TAG_UNORDERED_SEQNUM
NEAT_TAG_DESTINATION_IP_ADDRESS = _neat.NEAT_TAG_DESTINATION_IP_ADDRESS
NEAT_TAG_PRIORITY = _neat.NEAT_TAG_PRIORITY
NEAT_TAG_FLOW_GROUP = _neat.NEAT_TAG_FLOW_GROUP
NEAT_TAG_CC_ALGORITHM = _neat.NEAT_TAG_CC_ALGORITHM
NEAT_TAG_TRANSPORT_STACK = _neat.NEAT_TAG_TRANSPORT_STACK
NEAT_TAG_CHANNEL_NAME = _neat.NEAT_TAG_CHANNEL_NAME
NEAT_TAG_LAST = _neat.NEAT_TAG_LAST
class neat_tlv(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tag = property(_neat.neat_tlv_tag_get, _neat.neat_tlv_tag_set)
    type = property(_neat.neat_tlv_type_get, _neat.neat_tlv_type_set)
    value = property(_neat.neat_tlv_value_get)

    def __init__(self):
        _neat.neat_tlv_swiginit(self, _neat.new_neat_tlv())
    __swig_destroy__ = _neat.delete_neat_tlv

# Register neat_tlv in _neat:
_neat.neat_tlv_swigregister(neat_tlv)

class neat_tlv_value(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    integer = property(_neat.neat_tlv_value_integer_get, _neat.neat_tlv_value_integer_set)
    string = property(_neat.neat_tlv_value_string_get, _neat.neat_tlv_value_string_set)
    real = property(_neat.neat_tlv_value_real_get, _neat.neat_tlv_value_real_set)

    def __init__(self):
        _neat.neat_tlv_value_swiginit(self, _neat.new_neat_tlv_value())
    __swig_destroy__ = _neat.delete_neat_tlv_value

# Register neat_tlv_value in _neat:
_neat.neat_tlv_value_swigregister(neat_tlv_value)


def neat_new_flow(ctx):
    return _neat.neat_new_flow(ctx)

def neat_set_operations(ctx, flow, ops):
    return _neat.neat_set_operations(ctx, flow, ops)

def neat_get_stats(ctx, neat_stats):
    return _neat.neat_get_stats(ctx, neat_stats)

def neat_open(mgr, flow, name, port, optional, opt_count):
    return _neat.neat_open(mgr, flow, name, port, optional, opt_count)

def neat_read(ctx, flow, buffer, amt, actualAmt, optional, opt_count):
    return _neat.neat_read(ctx, flow, buffer, amt, actualAmt, optional, opt_count)

def neat_write(ctx, flow, buffer, amt, optional, opt_count):
    return _neat.neat_write(ctx, flow, buffer, amt, optional, opt_count)

def neat_get_property(ctx, flow, name, ptr, size):
    return _neat.neat_get_property(ctx, flow, name, ptr, size)

def neat_set_property(ctx, flow, properties):
    return _neat.neat_set_property(ctx, flow, properties)

def neat_accept(ctx, flow, port, optional, opt_count):
    return _neat.neat_accept(ctx, flow, port, optional, opt_count)

def neat_shutdown(ctx, flow):
    return _neat.neat_shutdown(ctx, flow)

def neat_close(ctx, flow):
    return _neat.neat_close(ctx, flow)

def neat_abort(ctx, flow):
    return _neat.neat_abort(ctx, flow)

def neat_getlpaddrs(ctx, flow, addrs, local):
    return _neat.neat_getlpaddrs(ctx, flow, addrs, local)

def neat_freelpaddrs(addrs):
    return _neat.neat_freelpaddrs(addrs)

def neat_change_timeout(ctx, flow, seconds):
    return _neat.neat_change_timeout(ctx, flow, seconds)

def neat_set_primary_dest(ctx, flow, name):
    return _neat.neat_set_primary_dest(ctx, flow, name)

def neat_set_checksum_coverage(ctx, flow, send_coverage, receive_coverage):
    return _neat.neat_set_checksum_coverage(ctx, flow, send_coverage, receive_coverage)

def neat_secure_identity(ctx, flow, filename, pemType):
    return _neat.neat_secure_identity(ctx, flow, filename, pemType)

def neat_set_qos(ctx, flow, qos):
    return _neat.neat_set_qos(ctx, flow, qos)

def neat_get_qos(ctx, flow):
    return _neat.neat_get_qos(ctx, flow)

def neat_set_ecn(ctx, flow, ecn):
    return _neat.neat_set_ecn(ctx, flow, ecn)

def neat_set_low_watermark(ctx, flow, watermark):
    return _neat.neat_set_low_watermark(ctx, flow, watermark)
NEAT_ERROR_OK = _neat.NEAT_ERROR_OK
NEAT_OK = _neat.NEAT_OK
NEAT_ERROR_WOULD_BLOCK = _neat.NEAT_ERROR_WOULD_BLOCK
NEAT_ERROR_BAD_ARGUMENT = _neat.NEAT_ERROR_BAD_ARGUMENT
NEAT_ERROR_IO = _neat.NEAT_ERROR_IO
NEAT_ERROR_DNS = _neat.NEAT_ERROR_DNS
NEAT_ERROR_INTERNAL = _neat.NEAT_ERROR_INTERNAL
NEAT_ERROR_SECURITY = _neat.NEAT_ERROR_SECURITY
NEAT_ERROR_UNABLE = _neat.NEAT_ERROR_UNABLE
NEAT_ERROR_MESSAGE_TOO_BIG = _neat.NEAT_ERROR_MESSAGE_TOO_BIG
NEAT_ERROR_REMOTE = _neat.NEAT_ERROR_REMOTE
NEAT_ERROR_OUT_OF_MEMORY = _neat.NEAT_ERROR_OUT_OF_MEMORY
NEAT_INVALID_STREAM = _neat.NEAT_INVALID_STREAM
NEAT_LOG_OFF = _neat.NEAT_LOG_OFF
NEAT_LOG_ERROR = _neat.NEAT_LOG_ERROR
NEAT_LOG_WARNING = _neat.NEAT_LOG_WARNING
NEAT_LOG_INFO = _neat.NEAT_LOG_INFO
NEAT_LOG_DEBUG = _neat.NEAT_LOG_DEBUG
NEAT_CERT_NONE = _neat.NEAT_CERT_NONE
NEAT_CERT_PEM = _neat.NEAT_CERT_PEM
NEAT_KEY_PEM = _neat.NEAT_KEY_PEM
NEAT_CERT_KEY_PEM = _neat.NEAT_CERT_KEY_PEM
NEAT_STACK_UDP = _neat.NEAT_STACK_UDP
NEAT_STACK_UDPLITE = _neat.NEAT_STACK_UDPLITE
NEAT_STACK_TCP = _neat.NEAT_STACK_TCP
NEAT_STACK_MPTCP = _neat.NEAT_STACK_MPTCP
NEAT_STACK_SCTP = _neat.NEAT_STACK_SCTP
NEAT_STACK_SCTP_UDP = _neat.NEAT_STACK_SCTP_UDP
NEAT_STACK_WEBRTC = _neat.NEAT_STACK_WEBRTC


